/** import React, React.Component, React Helmet, React Loadable and PropTypes*/
import React, { Component } from 'react';
import { connect } from "react-redux";
import PropTypes from 'prop-types';

/** import Material UI withStyles, withWidth, components and icons */
import Grid from '@material-ui/core/Grid';
import withWidth from '@material-ui/core/withWidth';
import { withStyles } from '@material-ui/core/styles';

/** import Redux and it's actions */
import { getAPI } from "../../redux/actions/apiActions";



/**
 * SurgeRosterDeploymentDashboard is a component to show Deployment Dashboard
 *
 * @name SurgeRosterDeploymentDashboard
 * @component
 * @category Page
 */

 var height = window.innerHeight;
class SurgeRosterDeploymentDashboard extends Component {
  constructor(props) {
    super(props);
    this.state = {
        link: '',
        height: height,
        width: '100%',
        data: {}
    }
    this.getOneTimeToken = this.getOneTimeToken.bind(this);

  }

    /**
   * componentDidMount is a lifecycle function called where the component is mounted
   */
     async componentDidMount() {
        await this.getOneTimeToken();
    }

    /**
     * getOneTimeToken is a function to get one time token
     */
    getOneTimeToken() {
      this.props
      .getAPI("/api/generate-one-time-token")
      .then((res) => {
        this.setState({ data: res.data.data, link: res.data.data.roster_deployment_link });
      })
      .catch((err) => {
        this.props.addFlashMessage({
          type: "error",
          text: "There is an error while retrieving your data",
        });
      });
    }

  render() {
   let { link, height, width, data } = this.state;
   const { classes } = this.props;
   link = link + data.user_id + '/' + data.token;

    return (
      <Grid container spacing={24}>
          <iframe src={link} height={height} width={width} className={classes.iFrame}></iframe>
      </Grid>
    );
  }
}

SurgeRosterDeploymentDashboard.propTypes = {
  /**
   * classes is a prop containing styles for this component generated by material-ui v3
   */
  classes: PropTypes.object.isRequired,
  /**
   * getAPI is a prop containing redux actions to call an api using GET HTTP Request
   */
   getAPI: PropTypes.func.isRequired,
   /**
   * width is a prop containing width data coming from withWidth feature by material-ui v3
   */
  width: PropTypes.string.isRequired,
   
}

/**
 * set up map dispatch to props for this component
 * @ignore
 * @property {object} mapDispatchToProps - contain redux actions to be used in component via props
 */
 const mapDispatchToProps = {
  getAPI,
};

/**
 * set up styles for this component
 * @ignore
 * @param {object} theme
 * @returns {object} classes prop to apply styles in the component
 */
 const styles = (theme) => ({
  iFrame: {
    'padding-left': theme.spacing.unit,
    'padding-right': theme.spacing.unit,
    'margin-left': theme.spacing.unit * 2,
    'margin-right': theme.spacing.unit * 2,
  }
});


export default withWidth()(withStyles(styles)(connect( "", mapDispatchToProps)(SurgeRosterDeploymentDashboard)));
